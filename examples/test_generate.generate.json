{
  "runId": "run_1753364580",
  "prompt": {
    "Name": "Funny Joke Test",
    "Description": "A test prompt for analyzing jokes",
    "Model": "openai/gpt-4o-mini",
    "ModelParameters": {
      "MaxTokens": null,
      "Temperature": null,
      "TopP": null
    },
    "ResponseFormat": null,
    "JsonSchema": null,
    "Messages": [
      {
        "Role": "system",
        "Content": "You are an expert at telling jokes. Determine if the Joke below is funny or not.\n"
      },
      {
        "Role": "user",
        "Content": "{{text}}\n"
      }
    ],
    "TestData": null,
    "Evaluators": null
  },
  "promptHash": "92470454a6b8e003814afd5d06546e26383348efbc84817de14c79bea5940d2c",
  "intent": "The intent of the prompt is to evaluate the humor of a given joke provided by the user. The system is expected to analyze the joke and determine whether it is funny or not, leveraging its expertise in humor.",
  "rules": null,
  "inverseRules": null,
  "inputSpec": "### Input Specification\n\nThe input consists of a single parameter provided by the user. Below are the details of the expected input:\n\n1. **Parameter Name**: `text`  \n   - **Type**: String  \n   - **Description**: A joke or humorous statement provided by the user for evaluation.  \n   - **Constraints**:  \n     - Must be a non-empty string.  \n     - Should not exceed 500 characters in length.  \n     - Can include punctuation, special characters, and whitespace.  \n     - Should be in a language that the system can understand (e.g., English).  \n   - **Examples**:  \n     - `\"Why don't skeletons fight each other? They don't have the guts.\"`  \n     - `\"I told my wife she was drawing her eyebrows too high. She looked surprised.\"`  \n     - `\"Knock, knock. Who's there? Boo. Boo who? Don't cry, it's just a joke!\"`  \n     - `\"What do you call fake spaghetti? An impasta.\"`",
  "tests": [],
  "options": {
    "temperature": 0,
    "models": {
      "rules": "openai/gpt-4o",
      "tests": "openai/gpt-4o",
      "groundtruth": "openai/gpt-4o",
      "testExpansion": "openai/gpt-4o"
    },
    "testsPerRule": 3,
    "runsPerTest": 2,
    "maxRulesPerTestGeneration": 3,
    "testGenerations": 2,
    "testExpansions": 0,
    "filterTestCount": 5,
    "verbose": false
  }
}